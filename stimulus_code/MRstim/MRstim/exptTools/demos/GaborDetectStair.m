AssertOpenGL;display = loadDisplayParams;%('builtin');%'tenbit');display.screenNumber = 1;% initialize staircase parametersstairParams.alternativeVarName = 'testPosition';stairParams.alternativeVarValues = ['L' 'R'];stairParams.adjustableVarName = 'contrast';% With 10-bits, the minimum contrast is just about 0.001 (the exact value% depends on your gamma correction). Most 10-bit systems should be able to% achieve 0.0016 (10^-2.8), and many can hit 0.001 (10^-3)stairParams.adjustableVarValues = [10.^[0:-.2:-3]];stairParams.randomVars = {};stairParams.numCorrectForStep = 2;stairParams.numIncorrectForStep = 1;stairParams.maxNumTrials = 50;stairParams.maxNumReversals = 8;stairParams.correctStepSize = [4 3 3 2 1];stairParams.incorrectStepSize = [-4 -3 -3 -2 -1];stairParams.feedback = 'auditory';stairParams.responseSet = '13';stairParams.curStairVars = {'cyclesPerDegree',[1 2 4 8]};stairParams.conditionName = {'contrast detect'};stairParams.adjustableVarStart = repmat(2, size(stairParams.curStairVars{2}));stairParams.iti = 0.25;% initialize stimulus poarametersstimParams.testPosition = 'L';stimParams.duration = 0.5;	% in secondsstimParams.contrast = 1.0;stimParams.colorDir = [1 1 1];stimParams.cyclesPerDegree = 4;	% spatial frequencystimParams.cyclesPerSecond = 0; % for static display%stimParams.cyclesPerSecond = display.frameRate/5.67; %for vertical drifting display of 15 cy/sstimParams.orientDegrees = 90;stimParams.phaseDegrees = 90;stimParams.temporalEnvelopeShape = 'raisedcos'; % or 'gaussian' (try spread=duration/6)stimParams.temporalSpread = 0.8;% the folowing are in degreesstimParams.size = 8;stimParams.eccentricity = 2;stimParams.spread = stimParams.size/5; %4.5trialGenFuncName = 'GaborTrial';%priorityLevel = MaxPriority(display.windowPtr);priorityLevel = 0;maxSF = 1/pix2angle(display,2);fprintf('Maximum spatial frequency (SF) with current display params = %0.2f CPD.\n', maxSF);if(max(stairParams.curStairVars{2})>maxSF)    error('Requested spatial frequency exceeds maximum.');elseif(max(stairParams.curStairVars{2})>maxSF/1.5)    disp('Requested SF exceeds max/2; stimulus SF and phase will be adjusted.');endsubjectName = 'demo';comment = 'none';dlgPrompt = {'Enter the subject name: ','Enter a comment: '};dlgTitle = 'Subject Name';while 1    resp = inputdlg(dlgPrompt,dlgTitle,1,{subjectName,comment});    if ~isempty(resp)        subjectName = resp{1};        comment = resp{2};        dataSumName = [subjectName 'sum'];        logFID(1) = fopen([subjectName '.log'], 'at');        fprintf(logFID(1), '%s\n', datestr(now));        fprintf(logFID(1), '%s = [ %s ]', stairParams.curStairVars{1}, num2str(stairParams.curStairVars{2}));        fprintf(logFID(1), '\n');        logFID(2) = 1;        try            display = openScreen(display);            newDataSum = doStaircase(display, stairParams, stimParams, trialGenFuncName, ...                priorityLevel, logFID, 'precomputeFirstTrial');            display = closeScreen(display);            %for(ii=1:length(stairParams.curStairVars{2}))            %    eval(['newDataSum(' num2str(ii) ').' stairParams.curStairVars{1} '=' ...            %        num2str(stairParams.curStairVars{2}(ii)) ';']);            %end            % plot the history of the staircase (to check for proper convergence)            sf = stairParams.curStairVars{2};            figure;            for(ii=1:length(newDataSum))                subplot(length(newDataSum),1,ii);                semilogy(newDataSum(ii).history);                ylabel('Contrast'); xlabel('Trial number');                title([num2str(sf(ii)) ' cpd']);                % if we get enough trials, we can fit a psychometric function                analysis = analyzeStaircase(newDataSum(ii));                n = sum(~isnan(newDataSum(ii).reversalStimLevel));                thresh(ii) = mean(newDataSum(ii).reversalStimLevel(3:n));            end            % Plot the CSF            figure;            plot(log10(sf), log10(1./thresh));            ylabel('Sensitivity'); xlabel('Spatial Freq (cpd)');            x = get(gca,'XTickLabel');            x = num2str(10.^str2num(x), '%0.1f');            set(gca,'XTickLabel', x);            % Try to merge with existing dataSum            sumExists = 1;            eval('load(dataSumName)', 'sumExists = 0;');            if sumExists                dataSum = [dataSum newDataSum];                save(dataSumName, 'dataSum');                disp(['DataSum file ' dataSumName ' updated.']);            else                disp(['DataSum file ' dataSumName ' not found.']);                dataSum = newDataSum;                save(dataSumName, 'dataSum');                disp(['New dataSum file ' dataSumName ' saved.']);            end        catch            display = closeScreen(display);            rethrow(lasterror);        end        fclose(logFID(1));    else        return;    endend
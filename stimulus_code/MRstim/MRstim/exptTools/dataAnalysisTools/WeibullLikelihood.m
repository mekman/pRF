function [L,chisq,df] = WeibullLikelihood(free, data, fixed, n)% [L,chisq,df]=WeibullLikelihood(free, data, fixed, n)%% Returns L, the likelihood of observing the psychometric% data in x and y, given parameter values for the Weibull% function. %% Optionally, returns the Chi-square distributed goodness-of-fit% estimate and it's associated df.%% param(1) -> threshold% param(2) -> slope (defaults to 3.5)% param(3) -> guess rate (lower asymtote- defaults to 0.5)% param(4) -> flake rate (upper asymtote- defaults to 0.999)% param(5) -> the maximum value for param 1 (defaults to 1)% % 'free' is a vector of the free parameter values and 'fixed' is%  a vector of fixed parameter values with 'nan' used as a placeholder%  for the free parameters.  (e.g., the first 'nan' in fixed gets%  free(1), the second 'nan' in fixed gets free(2), etc.%  data(1,:) is a vector of the x values.%  data(2,:) is a vector of the y values%% 'n' is a vector of length size(data,2).  It contains the number% of trials run at each stimulus level.%% 99.06.15	wap,rfd	Modified log-likelihood function to reflect the Watson%							method (Watson, AB (1979) Probability summation over%							time. Vision Research, 19, 515-522.)if length(fixed)<2   fixed(2) = 3.5;endif length(fixed)<3   fixed(3) = 0.5;endif length(fixed)<4   fixed(4) = 0.999;endif length(fixed)<5   fixed(5) = 1;endnumFree = 0;if exist('fixed', 'var')   if ~isnan(fixed(1))      thresh = fixed(1);   else      numFree = numFree+1;      thresh = free(numFree);   end   if ~isnan(fixed(2))      slope = fixed(2);   else     numFree = numFree+1;     slope = free(numFree);   end   if ~isnan(fixed(3))      guess = fixed(3);   else      numFree = numFree+1;      guess = free(numFree);   end   if ~isnan(fixed(4))      flake = fixed(4);   else      numFree = numFree+1;      flake = free(numFree);   end   if ~isnan(fixed(5))      maxThresh = fixed(5);   else      numFree = numFree+1;      maxThresh = free(numFree);   endelse   thresh = free(1);   slope = free(2);   guess = free(3);   flake = free(4);   maxThresh = free(5);end% Prevent thresh from dropping less than 0 when doing minimizationif thresh<=0 | thresh>maxThresh	L = Inf;	returnend	x = data(1,:);y = data(2,:);p = weib(x, thresh, slope, guess, flake);% negative log-likelihoodL = -sum(n.*(y.*log(p)+(1-y).*log(1-p)));if nargout < 2   returnend% prevent log of zero:y(find(y==0)) = 0.000001;y(find(y==1)) = 0.999999;% negative log-likelihood of the null hypothesis% (After Watson, 1979)Lo = -sum(n.*(y.*log(y)+(1-y).*log(1-y)));chisq = L - Lo;df = 2*(length(y) - numFree);
function [L,chisq,df] = sigmoidLikelihood(free, data, fixed, sigma)%[L,chisq,df] = sigmoidLikelihood(free, data, [fixed], [sigma])%% Returns the likelihood of the data% (x in the first row and y in the second), given% parameter values 'free' for the model. % 'fixed', if specified, indicates values to fix% (use nan as a placeholder for parameters that remain free).% Optionally, returns the Chi-square distributed goodness-of-fit% estimate and it's associated df.%% sigma is the an estimate of the measurement error at each value.%(defaults to 1)%% data(1,:) is a vector of the stimulus intensities.% data(2,:) is a vector of y values (proportion correct, matching value, etc.).% free = [s,p,m] where s is the semi-saturation (the stimulus intensity % that will give y of 0.5*m), p is the slope parameter and m is the saturation% (the upper asymtote, the maximum).numFree = 0;if exist('fixed', 'var')   if ~isnan(fixed(1))      s = fixed(1);   else      numFree = numFree+1;      s = free(numFree);   end  	if ~isnan(fixed(2))      p = fixed(2);   else     numFree = numFree+1;     p = free(numFree);  end   if ~isnan(fixed(3))      m = fixed(3);   else      numFree = numFree+1;      m = free(numFree);   endelse   s = free(1);   p = free(2);   m = free(3);endif ~exist('sigma', 'var')   sigma = 1;endy = sigmoid([s p m], data(1,:));% Avoid divide by zero:index = find(sigma == 0);sigma(index) = 1;% sum-of-squared error / sigma = "weighted least squares"%(this will be chi-square distributed if sigma is valid)L = sum((y-data(2,:)).^2 ./ sigma);if nargout < 2   returnenddf = length(y) - numFree;chisq = L;  % this is valid if sigma is valid